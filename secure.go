package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"io"
	"log"
	"os"
)

func encode64(b []byte) string {
	return base64.URLEncoding.EncodeToString(b)
}

func decode64(s string) []byte {
	data, err := base64.URLEncoding.DecodeString(s)
	if err != nil {
		panic(err)
	}
	return data
}
func decodeHex(data []byte) []byte {
	decoded := make([]byte, hex.DecodedLen(len(data)))
	_, err := hex.Decode(decoded, data)
	if err != nil {
		panic(err)
	}
	fmt.Println("decoded ", decoded)
	return decoded
}
func encodeHex(data []byte) []byte {
	encoded := make([]byte, hex.EncodedLen(len(data)))
	hex.Encode(encoded, data)

	fmt.Printf("enoded %s\n", encoded)
	return encoded
}

func generateRandomBytes(n int) ([]byte, error) {
	// generatee 64 bit key
	key := make([]byte, 64)
	if _, err := io.ReadFull(rand.Reader, key); err != nil {
		panic(err.Error())
	}
	return key, nil
}

func createHash(key string) []byte {
	hash := sha256.Sum256([]byte(key))
	return hash[:]
}

//64 hexkey
// generated by  openssl enc -nosalt -aes-256-cbc -k hello-aes -P
//const kkey string = "C639A572E14D5075C526FDDD43E4ECF6B095EA17783D32EF3D2710AF9F359DD4"
// generated by generateRandomBytes()
//const akey string = "ba20a37a02f637f562a433e5ed04acfbf0d6e1fbb0756e5725a487b24635c346"

func encrypt(data []byte, pvtKey []byte) []byte {
	key := make([]byte, hex.DecodedLen(len(pvtKey)))
	_, err := hex.Decode(key, pvtKey)
	if err != nil {
		log.Fatal(err)
	}

	block, _ := aes.NewCipher(key)
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonce := make([]byte, gcm.NonceSize())
	if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
		panic(err.Error())
	}
	ciphertext := gcm.Seal(nonce, nonce, data, nil)
	return ciphertext
}

func decrypt(data []byte, pvtKey []byte) []byte {
	key := make([]byte, hex.DecodedLen(len(pvtKey)))
	_, err := hex.Decode(key, pvtKey)
	if err != nil {
		log.Fatal(err)
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonceSize := gcm.NonceSize()
	nonce, ciphertext := data[:nonceSize], data[nonceSize:]
	plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		panic(err.Error())
	}
	return plaintext
}

func readKeyFile(path string) []byte {
	file, err := os.Open(path) // For read access.
	if err != nil {
		panic(err)
	}
	pvtKey := make([]byte, 64)
	count, err := file.Read(pvtKey)
	if err != nil {
		panic(err)
	}
	fmt.Printf("read %d bytes: %q\n", count, pvtKey[:count])
	return pvtKey
}

func test_main() {

	clearText := "[{'Hello' : 'World'}][{'Hello' : 'World'}]"
	fmt.Println(clearText)

	pvtKey := readKeyFile("private.key")

	ciphertext := encrypt([]byte(clearText), pvtKey)
	fmt.Println(ciphertext)

	encoded := encodeHex(ciphertext)
	// <--------------network ------------->
	decoded := decodeHex(encoded)

	plaintext := decrypt(decoded, pvtKey)
	fmt.Println(string(plaintext))
}
